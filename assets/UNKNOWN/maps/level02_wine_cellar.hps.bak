//////////////////////
//BEGIN BLOCKED DOOR//
/*Move wooden barrel to unlock door
 */
void FuncUnlockDoor(string &in asParent, string &in asChild, int alState)
{
	SetSwingDoorLocked("cellar_wood01_3", false, false);
	
	/*DEBUG
	 */
	AddDebugMessage("UnlockDoor!", true);
}
//END BLOCKED DOOR//
////////////////////


////////////////////////////////
//BEGIN MOANING & CREAK HORROR//
/*Start the creak sounds + ps when entering basement, stop them when leaving the basement/area
 */
void FuncMoanHorrors(string &in asParent, string &in asChild, int alState)
{
	float fMoan = RandFloat(5.5f,15.5f);
	
	AddTimer("moanTimer", 4.5f+fMoan, "FuncMoanTimer");	
	AddTimer("stepTimer", 4.5f, "FuncMoanTimer");	
	AddTimer("childTimer", 0.5f+fMoan, "FuncMoanTimer");
	
	PlaySoundAtEntity("moanSoundx", "scare_male_terrified5.snt", "Player", 0.0f, false);
	AddTimer("sanity", 0.7f, "TimerSanity");
	
	/*DEBUG
	 */
	AddDebugMessage("Begin moaning sounds", true);
}
/*Random placment of moan at random time
 */
void FuncMoanTimer(string &in asTimer)
{
	int iMoan = RandFloat(1, 9);	
	float fMoan = RandFloat(5.5f,15.5f);
	
	if(asTimer == "moanTimer") {
		PlaySoundAtEntity("moanSound"+iMoan, "scare_male_terrified.snt", "HorrorMoan_"+iMoan, 0.0f, false);
		
		AddTimer("moanTimer", 6.5f+fMoan, "FuncMoanTimer");
	}
	else if(asTimer == "stepTimer") {
		iMoan = RandFloat(1, 6);	
	
		PlaySoundAtEntity("stepSound"+iMoan, "scare_steps_big.snt", "HorrorMoan_"+iMoan, 0.0f, false);
		
		AddTimer("stepTimer", 7.5f+fMoan, "FuncMoanTimer");
	}
	else if(asTimer == "childTimer") {
		iMoan = RandFloat(2, 6);	
		
		PlaySoundAtEntity("childSound"+iMoan, "scare_baby_cry.snt", "HorrorMoan_"+iMoan, 0.0f, false);
		
		AddTimer("childTimer", 8.5f+fMoan, "FuncMoanTimer");
	}

	/*DEBUG
	 */
	AddDebugMessage("Now moaning in area: "+iMoan, false);
}
/*Random placment of creak at random time
 */
void CreakTimer(string &in asTimer)
{
	int iCreak = RandFloat(1, 12);	
	float fCreak = RandFloat(1.5f,7.5f);
	
	//ADD GRUNTING FROM GRUNT ENEMY
	PlaySoundAtEntity("creakSound"+iCreak, "scare_wood_creak_mix", "HorrorCreak_"+iCreak, 0.0f, false);
	CreateParticleSystemAtEntity("creakPS"+iCreak, "ps_dust_falling_small", "HorrorCreak_"+iCreak, false);
		
	AddTimer("creak", 0.5f+fCreak, "CreakTimer");
		
	/*DEBUG
	 */
	AddDebugMessage("Now creaking in area: "+iCreak, false);
}
void TimerSanity(string &in asTimer)
{
	GiveSanityDamage(10, true);
}
//END MOANING & CREAK HORROR//
//////////////////////////////


///////////////////////////////////////
//BEGIN GRUNT ACTIVATION/DEACTIVATION//
/*When picking oil in barrel room slam door
 */
void PickOil(string &in asEntity, string &in asType)
{
	SetSwingDoorClosed("cellar_wood01_4", false, false);
	SetSwingDoorDisableAutoClose("cellar_wood01_4", true);
	
	SetEntityActive("AreaActivateFirstEnemy", true);
	
	AddPropImpulse("cellar_wood01_4", 2.0f, 0, 0, "World");
	
	if(!GetSwingDoorClosed("cellar_wood01_1"))
		PlaySoundAtEntity("SlamDoor","scare_slam_door.snt", "cellar_wood01_1", 0, false);
		
	SetSwingDoorClosed("cellar_wood01_1", true, true);
	
	AddTimer("sanity", 1, "TimerSanity");

	PlaySoundAtEntity("PlayerScare","scare_tingeling.snt", "Player", 0, false);
}
/*Second grunt encounter
 */
void CollideActivateGrunt(string &in asParent, string &in asChild, int alState)
{
	SetSwingDoorClosed("cellar_wood01_1", false, false);
	SetSwingDoorDisableAutoClose("cellar_wood01_1", true);
	
	SetEntityActive("character_infected_1, true);
	AddEnemyPatrolNode("character_infected_1", "PathNodeArea_4", 0, "");
	AddEnemyPatrolNode("character_infected_1", "PathNodeArea_128", 0, "");
	AddEnemyPatrolNode("character_infected_1", "PathNodeArea_3", 0, "");
	
	AddPropImpulse("cellar_wood01_1", -2.0f, 0, 0, "World");
}
//END GRUNT ACTIVATION/DEACTIVATION//
/////////////////////////////////////

void PickChemical(string &in asEntity, string &in asType)
{
	//Turn off a light used to make the chemical more visible.
	if(asEntity == "Chemical_1") FadeLightTo("PointLight_32", 0,0,0,0, -1, 2);
	if(asEntity == "Chemical_2") FadeLightTo("PointLight_1", 0,0,0,0, -1, 2);
	if(asEntity == "Chemical_3") FadeLightTo("PointLight_33", 0,0,0,0, -1, 2);
	if(asEntity == "Chemical_4") FadeLightTo("PointLight_34", 0,0,0,0, -1, 2);
	
	AddGlobalVarInt("ChemJars",1);
	
	if(GetLocalVarInt("QuestMovedIngredients") == 0)
	{
		AddQuest("IngredientsMoved","IngredientsMoved");
		SetLocalVarInt("QuestMovedIngredients", 1);
	}
	
	if(GetGlobalVarInt("ChemJars") == 4)
	{
		GiveSanityBoost();
		CompleteQuest("IngredientsMoved", "IngredientsMovedCompleted");
	}
}

void TimerDoorForce(string &in asTimer)
{
	AddPropForce("cellar_wood01_1", 200.0f, 0.0f, 200.0f, "World");

	AddDebugMessage("Hey!", false);
	if(asTimer == "doorforce5")
		StopSound("SlamDoor", 1.0f);
}

////////////////////////////////////////////////////////////
//BEGIN CHAINS AND HANGING CORPSES(CARCASS AS PLACEHOLDERS//
/*Create a blood drip particle and play a blood drip sound a bit later
 */
void TimerBloodDrop(string &in asTimer)
{
	if(asTimer == "AreaEndBlood_1" or asTimer == "AreaEndBlood_2" or asTimer == "AreaEndBlood_3" ){
		PlaySoundAtEntity("blooddrop", "general_blood_drop", asTimer, 0, false);
		AddTimer("AreaBeginBlood_"+GetLocalVarInt("Blood"), 0.1f, "TimerBloodDrop");
	}
	else{
		CreateParticleSystemAtEntity("PSblood", "ps_blood_drop.ps", asTimer, false);
		AddTimer("AreaEndBlood_"+GetLocalVarInt("Blood"), 2.5f, "TimerBloodDrop");
	}

	int iBlood = RandFloat(1,3);
	
	SetLocalVarInt("Blood", iBlood);
}
/*Give the chains a bit of a push to make them swagel in air
*/
void TimerChain(string &in asTimer)
{	
	for(int i=1;i<=6;i++) 
		AddPropForce("invisible_body_"+i, RandFloat(100,300), 0, RandFloat(100,300), "Local");
		
	AddTimer(asTimer, 5, asTimer);
}
/*An area to activate the lookat area in ceiling
 */
void CollideActiveCeiling(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1) SetEntityActive("AreaCeiling", true);
	else if(alState == -1) SetEntityActive("AreaCeiling", false);
}
/*When looking at ceiling and seeing corpses, loose sanity
 */
void LookAtCeiling(string &in entity, int alState) 
{
	if(alState == 1){
		FadeSepiaColorTo(0.75f, 0.3f);
		GiveSanityDamage(10, false);
		PlaySoundAtEntity("whine", "05_whine", "Player", 4, false);
	} 
	else if(alState == -1){
		FadeSepiaColorTo(0, 0.3f);
		StopSound("whine", 4);
		SetEntityActive("AreaCeiling", false);
		SetEntityActive("AreaCeilingActivate", false);
	} 
}
//END CHAINS AND HANGING CORPSES(CARCASS AS PLACEHOLDERS//
//////////////////////////////////////////////////////////


//////////////////////////////////////
//BEGIN EVENT WITH BOTTLES AND STEPS//
void CollideAreaRemoveDoorEvent(string &in asParent, string &in asChild, int alState)
{
	SetEntityPlayerInteractCallback("cellar_wood01_3", "", false);
}
/*Interact door and rumble is played behind it
 */
void InteractDoorWithGruntBehind(string &in asEntity)
{
	if(GetLocalVarInt("HeardRumble") >= 1){
		SetEntityActive("AreaOtherEscape", true);
		SetEntityActive("AreaHoleEvents", false);
		AddEntityCollideCallback("Player", "AreaOtherEscape", "CollideAreaOtherEscape", true, 1);
	}
	
	AddLocalVarInt("HeardRumble", 1);
	
	PlaySoundAtEntity("gruntmumble", "amb_idle", "AreaBottleEvent", 0, false);
	PlaySoundAtEntity("bottlevent", "05_event_bottles", "AreaBottleEvent", 0, false);
	AddTimer("sanity", 0.75, "TimerGiveSanityDamage");
}
/*When going the other way, some rumble for the room on other side
 */
void InteractDoorToHole(string &in asEntity)
{
	AddLocalVarInt("HeardRumble", 1);
	
	if(GetLocalVarInt("HeardRumble") <= 1) return;
	
	PlaySoundAtEntity("steps1", "scare_wood_creak_walk", "HoleParticle", 0, false);
	
	AddTimer("step1", 0.3f, "TimerPlaySteps");
	AddTimer("step2", 0.6f, "TimerPlaySteps");
	AddTimer("step3", 0.9f, "TimerPlaySteps");
}
void TimerPlaySteps(string &in asTimer)
{	
	if(asTimer == "step1") SetEntityActive("wood_box01_19", true);
	else if(asTimer == "step2") SetEntityActive("wood_box01_20", true);
	else SetEntityActive("wood_box01_21", true);
}
/*As looking in the room with a hole in the ceiling, debris fall down
 */
void CollideHoleEvents(string &in asParent, string &in asChild, int alState)
{	
	AddLocalVarInt("HeardRumble", 1);
	
	if(GetLocalVarInt("HeardRumble") <= 2) return;
	
	for(int i=1;i<=3;i++) SetEntityActive("rock_small_"+i, true);
	CreateParticleSystemAtEntity("PShole", "ps_dust_falling_hole.ps", "HoleParticle", false);
	PlaySoundAtEntity("scratches", "05_wall_scratch", "HoleParticle", 0, false);
	
	SetEntityPlayerInteractCallback("cellar_wood01_3", "", true);
	
	AddTimer("sanity", 1.5f, "TimerGiveSanityDamage");
}
void TimerGiveSanityDamage(string &in asTimer)
{	
	GiveSanityDamage(10, true);
}
//Alternate escape route
void CollideAreaOtherEscape(string &in asParent, string &in asChild, int alState)
{
	RemoveEntityCollideCallback("AreaUnlockDoor", "BarrelBlock");
	
	SetSwingDoorClosed("cellar_wood01_6", false, false);
	SetSwingDoorDisableAutoClose("cellar_wood01_6", true);
	
	SetSwingDoorLocked("cellar_wood01_3", false, false);
	SetSwingDoorDisableAutoClose("cellar_wood01_3", true);
	SetSwingDoorClosed("cellar_wood01_3", false, false);
	
	AddTimer("cellar_wood01_3", 0.1f, "TimerPushTheDumbDoor02"); AddTimer("cellar_wood01_3", 0.2f, "TimerPushTheDumbDoor02");
	
	AddPropImpulse("cellar_wood01_6", 2.0f, 0, 0, "World");
	AddPropImpulse("BarrelBlock", 0.0f, 16.0f, -16.0f, "World");
	
	PlaySoundAtEntity("closedoorsound", "close_door.snt", "cellar_wood01_6", 0, false);	
}
void TimerPushTheDumbDoor02(string &in asTimer)
{
	AddPropImpulse(asTimer, 0, 0, -2.0f, "World");
	AddDebugMessage("Push door!", false);
}
//END EVENT WITH BOTTLES AND STEPS//
////////////////////////////////////


//////////////////////////////
//BEGIN BANG AND PAIN SOUNDS//
void CollideBangDoor(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("bangs", "05_event_door_bang", "cellar_wood01_5", 1, false);
	PlaySoundAtEntity("whineaa", "scare_whine_loop", "Player", 0.5f, false);
		
	FadeSepiaColorTo(0.75f, 0.3f);
	FadeImageTrailTo(1.5, 0.5);
	
	AddTimer("bang1", 0.6f, "TimerBangDoor");
	AddTimer("bang2", 1.6f, "TimerBangDoor");
	AddTimer("bang3", 2.5f, "TimerBangDoor");
	AddTimer("bang4", 3.0f, "TimerBangDoor");
}
void TimerBangDoor(string &in asTimer)
{	
	if(asTimer == "bang1"){ 
		AddPropImpulse("cellar_wood01_5", 0, 0, 5, "World");
		CreateParticleSystemAtEntity("bang1", "ps_dust_impact_vert.ps", "cellar_wood01_5", false);
		StartScreenShake(0.008, 0.5f, 0.1f,0.3f);
		GiveSanityDamage(10, true);
	}
	else if(asTimer == "bang2") { 
		AddPropImpulse("cellar_wood01_5", 0, 0, 5, "World");
		CreateParticleSystemAtEntity("bang1", "ps_dust_impact_vert.ps", "cellar_wood01_5", false);
		StartScreenShake(0.008, 0.5f, 0.1f,0.3f);
	}
	else if(asTimer == "bang3") { 
		AddPropImpulse("cellar_wood01_5", 0, 0, 5, "World");
		CreateParticleSystemAtEntity("bang1", "ps_dust_impact_vert.ps", "cellar_wood01_5", false);
		StartScreenShake(0.008, 0.5f, 0.1f,0.3f);
	}
	else {
		SetSwingDoorLocked("cellar_wood01_5", false, false);
		FadeSepiaColorTo(0, 0.3f);
		FadeImageTrailTo(0, 0.1);
		StopSound("whineaa", 4);
	}
}
//END BANG AND PAIN SOUNDS//
////////////////////////////


/////////////////////
//BEGIN ENEMY EVENT//
void PickEnemy(string &in asEntity, string &in asType)
{
	if(GetLocalVarInt("EnemyEventDone") == 1) return;
	if(GetGlobalVarInt("IGF")==1) return;
	
	SetEntityActive("AreaOtherEscape", false);
	
	AddEntityCollideCallback("Player", "AreaEnemyEvent_2", "CollideActivateEnemy", true, 1);
	
	SetSwingDoorDisableAutoClose("cellar_wood01_4", true);
	SetSwingDoorClosed("cellar_wood01_4", false, false);
	
	AddPropImpulse("cellar_wood01_4", 2.0f, 0, 0, "World");
	
	PlaySoundAtEntity("monster", "grunt/amb_idle", "torch_static01_7", 0.25f, false);
	
	SetEntityActive("grunt_normal_1", true);

	AddTimer("enemy1", 0.2f, "TimerEnemy");

	SetEntityPlayerLookAtCallback("AreaHoleEvents", "LookAtEnemy", true);

	SetPlayerRunSpeedMul(0.6f);
	SetPlayerMoveSpeedMul(0.8f);
	
	SetLocalVarInt("EnemyEventDone", 1);
}
void LookAtEnemy(string &in asEntity, int alState)
{
	RemoveEntityCollideCallback("Player", "AreaEnemyEvent_2");
	
	AddTimer("enemy2", 1.5f, "TimerEnemy");
	AddTimer("enemy3", 5, "TimerEnemy");
	AddTimer("enemy4", 10, "TimerEnemy");
	AddEnemyPatrolNode("grunt_normal_1", "PathNodeArea_3", 0, "");
	
	SetEntityPlayerLookAtCallback("AreaHoleEvents", "", true);
}
void CollideActivateEnemy(string &in asParent, string &in asChild, int alState)
{
	SetEntityPlayerLookAtCallback("AreaHoleEvents", "", true);
	
	AddTimer("enemy2", 1.5f, "TimerEnemy");
	AddTimer("enemy3", 5, "TimerEnemy");
	AddTimer("enemy4", 10, "TimerEnemy");
	AddEnemyPatrolNode("grunt_normal_1", "PathNodeArea_3", 0, "");
}

void TimerEnemy(string &in asTimer)
{
	if(asTimer == "speed"){
		SetPlayerRunSpeedMul(1);
		SetPlayerMoveSpeedMul(1);
		//FadePlayerFOVMulTo(1, 0.01f);
		//FadeRadialBlurTo(0, 0.1f);
	}
	else if(asTimer == "enemy1"){
		PlayMusic("05_event_steps.ogg", false, 0.8f, 1, 10, false);
		//StartPlayerLookAt("grunt_normal_1", 5, 5, "");
		//FadePlayerFOVMulTo(2, 0.01f);
		//FadeRadialBlurTo(0.1f, 0.025f);
		//SetRadialBlurStartDist(0.2f);
		SetPlayerRunSpeedMul(0.4f);
		SetPlayerMoveSpeedMul(0.6f);
	}
	else if(asTimer == "enemy2"){
		//StopPlayerLookAt();
		PlaySoundAtEntity("react", "react_breath", "Player", 0.6f, false);	
		SetPlayerRunSpeedMul(0.2f);
		SetPlayerMoveSpeedMul(0.4f);
	}
	else if(asTimer == "enemy3"){
		SetPlayerRunSpeedMul(0.4f);
		SetPlayerMoveSpeedMul(0.6f);
	}
	else{
		SetEntityActive("AreaEnemyEvent_3", false);	//If player throw box at enemy, enemy will chase player until player leaves level
		SetPlayerRunSpeedMul(1);
		SetPlayerMoveSpeedMul(1);
		//FadePlayerFOVMulTo(1, 0.01f);
		//FadeRadialBlurTo(0, 0.1f);
	}
}
void CollideDeactivateEnemy(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("character_infected_1", false);
	RemoveEntityCollideCallback("AreaUnlockDoor", "BarrelBlock");
	
	SetSwingDoorClosed("cellar_wood01_4", true, false);
	PlaySoundAtEntity("cellar_wood01_4slam", "scare_slam_door", "cellar_wood01_4", 0.0f, false);
	
	SetSwingDoorClosed("cellar_wood01_6", false, false);
	SetSwingDoorDisableAutoClose("cellar_wood01_6", true);
	
	SetSwingDoorLocked("cellar_wood01_3", false, false);
	SetSwingDoorDisableAutoClose("cellar_wood01_3", true);
	SetSwingDoorClosed("cellar_wood01_3", false, false);
	
	AddTimer("cellar_wood01_3", 0.1f, "TimerPushTheDumbDoor"); AddTimer("cellar_wood01_3", 0.2f, "TimerPushTheDumbDoor");
	
	AddPropImpulse("cellar_wood01_6", 2.0f, 0, 0, "World");
	AddPropImpulse("BarrelBlock", 0.0f, 16.0f, -16.0f, "World");
	
	PlaySoundAtEntity("closedoorsound", "close_door.snt", "cellar_wood01_6", 0, false);	
	PlaySoundAtEntity("react2", "react_breath", "Player", 0.8f, false);
}
void TimerPushTheDumbDoor(string &in asTimer)
{
	AddPropImpulse(asTimer, 0, 0, -2.0f, "World");
	AddDebugMessage("Push door!", false);
}
void CollideEnemyHint(string &in asParent, string &in asChild, int alState)
{
	GiveHint("EnemyTip01", "Hints", "EnemyTip01", 0);
}

//END ENEMY EVENT//
///////////////////

////////////////
//BEGIN CLANKS//
void CollideClank(string &in asParent, string &in asChild, int alState)
{	
	AddTimer("Clank_1", 0.25f, "TimerEnterClank");
}

void TimerEnterClank(string &in asTimer)
{	
	if(asTimer == "Clank_1"){
		PlaySoundAtEntity("clanks","04_enter_clank.snt", "HorrorCreak_6", 0.5f, false);
		FadeImageTrailTo(1.5f, 2);
		
		AddTimer("Clank_2", 0.75f, "TimerEnterClank");
		AddTimer("Clank_3", 2.25f, "TimerEnterClank");
	}
	else if(asTimer == "Clank_2"){
		GiveSanityDamage(10, true);
	}	
	else if(asTimer == "Clank_3"){ 
		FadeImageTrailTo(0.0f, 2);
	}
	
	else if(asTimer == "Thunder"){
		PlaySoundAtEntity("thunder","general_thunder.snt", "Player", 0, false);
	}
	
}
//END CLANKS//
//////////////

///////////////////////
//BEGIN SPIDER CAVEIN//
void CollideActivateSpider(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive("AreaBeginSpider_1", true);
	AddDebugMessage("In Area 1", false);
	
	SetLocalVarFloat("RockBreath", 2.0f);
	
	AddTimer("rockbreath", 0.2, "TimerRockBreath");	
}
void TimerRockBreath(string &in asTimer)
{
	if(GetLocalVarFloat("RockBreath") > 0.5f){
		AddLocalVarFloat("RockBreath", -0.2f);
		AddLocalVarFloat("RockShake", 0.001f);
	}
	
	PlaySoundAtEntity("monster_breath","04_breath.snt", "AreaCaveMonster", GetLocalVarFloat("RockBreath"), false);
	
	StartScreenShake(GetLocalVarFloat("RockShake"), 0.5f, 2.0f, 1.0f);
	CreateParticleSystemAtEntity("breathps", "ps_cave_monster_breath", "AreaCaveMonster", false);
	
	AddTimer("rockbreath", 5, "TimerRockBreath");	
	
	AddDebugMessage("Value: "+GetLocalVarFloat("RockBreath"), false);
}
void LookAtCave(string &in asEntity, int alState)
{
	PlaySoundAtEntity("monster_scream","04_warn.snt", "AreaCaveMonster", 0, false);
	
	StartScreenShake(0.007f, 2.0f, 0.5f, 2.0f);
	
	CreateParticleSystemAtEntity("breathps", "ps_cave_monster_warn.ps", "AreaCaveMonster", false);	

	AddTimer("monster1", 0.5f, "TimerRockMonster");
	AddTimer("monster2", 2.0f, "TimerRockMonster");
	AddTimer("monster3", 3.0f, "TimerRockMonster");
	AddTimer("monster4", 5.0f, "TimerRockMonster");
}
void TimerRockMonster(string &in asTimer)
{
	if(asTimer == "monster1"){
		StartPlayerLookAt("AreaCaveMonster", 1.0f, 1.0f, "");
		GiveSanityDamage(5.0f, false);
		FadeRadialBlurTo(0.05f, 0.025f);
		SetRadialBlurStartDist(0.1f);
	}
	else if(asTimer == "monster2"){
		StopPlayerLookAt();
	}
	else if(asTimer == "monster3"){
		PlayGuiSound("react_creath", 0.7f);
		FadeRadialBlurTo(0, 0.1f);
	}
	else{
		PlayGuiSound("react_creath", 0.5f);
	}	
}
void CollideScreamCave(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("monster_scream","04_scream.snt", "AreaCaveMonster", 0, false);
	
	StartScreenShake(0.02f, 2.0f, 0.5f, 2.0f);
	
	CreateParticleSystemAtEntity("breathps", "ps_cave_monster_scream.ps", "AreaCaveMonster", false);	
	
	AddTimer("scream1", 0.5f, "TimerCaveScream");
	AddTimer("scream2", 1.0f, "TimerCaveScream");
	AddTimer("scream3", 3.0f, "TimerCaveScream");
	AddTimer("scream4", 5.0f, "TimerCaveScream");
}
void TimerCaveScream(string &in asTimer)
{
	if(asTimer == "scream1"){
		GiveSanityDamage(10.0f, false);
		FadeSepiaColorTo(0.5f, 0.025f);
		FadeRadialBlurTo(0.1f, 0.025f);
		SetRadialBlurStartDist(0.2f);
	}
	else if(asTimer == "scream2"){
	
	}
	else if(asTimer == "scream3"){
		PlayGuiSound("react_creath", 0.8f);
		FadeSepiaColorTo(0, 0.1f);
		FadeRadialBlurTo(0, 0.1f);
	}
	else{
		PlayGuiSound("react_creath", 0.6f);
	}
}
//END SPIDER CAVEIN//
/////////////////////

//////////////////////
//BEGIN ACID MACHINE//
/*Use jar on machine to place it under pipe
 */
void ItemJarOnMachine(string &in asItem, string &in asEntity)
{
	SetEntityActive("chemical_container_static_1", true);
	
	RemoveItem(asItem);
	
	PlaySoundAtEntity("PlaceJar","puzzle_place_jar", "AreaCompleteSuccess", 0, false);
	
	SetLocalVarInt("chemical_container_static_1", 1);
}
/*Use chemicals on machine or valves to add it to bottles
 */
void AddChemical(string &in asItem, string &in asEntity)
{
	RemoveItem(asItem);
	
	AddLocalVarInt("ChemicalsInMachine", 1);
	
	SetEntityActive("JarEmpty"+asItem, false);
	SetEntityActive("Jar"+asItem, true);
	
	PlaySoundAtEntity(asItem+"Sound","puzzle_add_chemical.snt", asEntity, 1, false);
	FadeLightTo("Light"+asItem, -1, -1, -1, -1, 0.5f, 0.1f);
	
	if(GetLocalVarInt("ChemicalsInMachine") == 4){
		GiveSanityBoostSmall();
		UnBlockHint("EntityWheel");
		for(int i=1;i<=4;i++) 
			SetEntityPlayerInteractCallback("Valve_"+i, "InteractAcidMachine02", true);	
		SetLocalVarInt("DoBigFeet", 0); 
	}
}
/*When touching the vales
 */
void InteractAcidMachine(string &in asEntity)
{
	if(GetLocalVarInt("ChemicalsInMachine") != 4)
	{
		AddQuest("AcidPotion","AcidPotion");
		SetMessage("Ch01Level04", "InteractAcidMachineNoChem",-1);
	}
	else if(GetLocalVarInt("ChemicalsInMachine") == 4)
	{
		SetWheelStuckState("ValveIgnite", 0, false);
	}
}
void InteractAcidMachine02(string &in asEntity)
{
	if(GetLocalVarInt("ValveIgniteFirst") == 0)
	{
		SetMessage("Ch01Level03", "MachineNeedsToStart", 0);
		SetLocalVarInt("ValveIgniteFirst", 1);
		for(int i=1;i<=4;i++) 
			SetEntityPlayerInteractCallback("Valve_"+i, "InteractAcidMachine", false);	
	}
}
/*Moving the big valve will turn on the burners and ready the machine
 */
void InteractTurnOnAcidMachine(string &in asName, string &in asMainEntity, string &in asConnectEntity, int alState)
{
	AddDebugMessage("Connect "+asMainEntity+" and "+asConnectEntity+" state:"+alState, false);
	
	if(alState == 1)
	{
		for(int i=1;i<=4;i++) {
			CreateParticleSystemAtEntity(asName+"Fire"+i, "ps_fire_candle.ps", "Valve_"+i+"_AreaBottle", false);
			
			FadeLightTo("Valve_"+i+"_Light", -1, -1, -1, -1, 0.4f, 1);
			
			SetWheelStuckState("Valve_"+i, 0, true);
		} 
		
		SetLocalVarInt("ValveIgniteFirst", 1);
		
		FadeLightTo("LightBurn", -1, -1, -1, -1, 3.0f, 2);
		
		PlaySoundAtEntity("IgniteSound", "general_fire_burning_low", "Valve_1_AreaBottle", 1, false);
		
		SetWheelStuckState("ValveIgnite", 1, true);
	} 
	else if(alState == -1)
	{
		for(int i=1;i<=4;i++){
			DestroyParticleSystem(asName+"Fire"+i);
			
			FadeLightTo("Valve_"+i+"_Light", -1, -1, -1, -1, 0, 1);
			
			SetWheelStuckState("Valve_"+i, -1, true); 
		} 		
		
		FadeLightTo("LightBurn", -1, -1, -1, -1, 0, 2);
		
		StopSound("IgniteSound", 1);
	}
}
/*Turning the four valves on/off to try and get the sequence right
 */
void InteractTurnValve(string &in asName, string &in asMainEntity, string &in asConnectEntity, int alState)
{
	/*START WHAT HAPPENS WHEN VAVLES ARE TURNED ON
	 */
	if(alState == 1) {

		 /*Mark Valve as on
		  */
		SetLocalVarInt(asMainEntity, 1);
		AddLocalVarInt("ValvesNrOn", 1);
		
		AddDebugMessage("ValvesNrOn: "+GetLocalVarInt("ValvesNrOn")+" And Feet "+GetLocalVarInt("DoBigFeet"), false);
		
		if(GetLocalVarInt("ValvesNrOn") == 0){
			SetWheelStuckState("ValveIgnite", -1, true); 

			PlaySoundAtEntity("FinalBoil","puzzle_boil.snt", "Valve_4_AreaValve", 1, false);
			
			CreateParticleSystemAtEntity("FinalSteam", "ps_acid_machine_bubble_large02.ps", "Valve_4_AreaValve", false); 
			CreateParticleSystemAtEntity("FinalFlow", "ps_acid_machine_bubble_end.ps", "AreaCompleteSuccess", false); 
			
			FadeLightTo("LightBurn", -1, 1, -1, -1, 3.0f, 5);
			FadeLightTo("LightAcid", -1, -1, -1, -1, 0.3f, 2);
			
			AddTimer("done", 2, "TimerAcidDone");	
			
		} else DoEffectLarge(asName, asConnectEntity);
		
		/*Only an event, nothing puzzle related
		 */
		/*if(GetLocalVarInt("ValvesNrOn") == -2 && GetLocalVarInt("DoBigFeet") == 0){ 
			AddTimer("Feet_1", 2.5f, "TimerBigFeet"); 
			PlaySoundAtEntity("bang","general_thunder.snt", "Player", 0, false);
			PlaySoundAtEntity("biggus","04_big_feet.snt", "Player", 0, false); 
			SetLocalVarInt("DoBigFeet", 1); 
		} */
		
		/*If three vavles on, reset the machine
		 */
		if((GetLocalVarInt("Valve_1")+GetLocalVarInt("Valve_2")+GetLocalVarInt("Valve_3")+GetLocalVarInt("Valve_4")) > 2 ) {
			for(int i=1;i<=4;i++) SetWheelStuckState("Valve_"+i, -1, true); 
			
			AddTimer("release", 0.1f, "TimerReleaseValves");
			return;
		}

		/*If the valve turned on is the correct order move ahead, if not hint of wrong order
		 */
		if(asMainEntity == "Valve_1"){
			if(GetLocalVarInt("RoadToSuccess") == 0) DoEffectLarge(asName, asConnectEntity);
			else DoEffectSmall(asName, asConnectEntity);
		} 
		else if(asMainEntity == "Valve_2"){
			if(GetLocalVarInt("RoadToSuccess") == 1) DoEffectLarge(asName, asConnectEntity);
			else DoEffectSmall(asName, asConnectEntity);	
		} 
		else if(asMainEntity == "Valve_3"){
			if(GetLocalVarInt("RoadToSuccess") == 3){ 
				DoEffectLarge(asName, asConnectEntity);
				
				//This has nothing to do with puzzle, it's a pure event in level triggered by how far puzzle completed
				/*if(GetLocalVarInt("DoBigFeet") != 1){ AddTimer("Feet_1", 2.5f, "TimerBigFeet"); PlaySoundAtEntity("bang","general_thunder.snt", "Player", 0, false);
					PlaySoundAtEntity("biggus","04_big_feet.snt", "Player", 0, false); SetLocalVarInt("DoBigFeet", 1); 
				} */
			} 
			else DoEffectSmall(asName, asConnectEntity);	
		} 
		else if(asMainEntity == "Valve_4"){
			if(GetLocalVarInt("RoadToSuccess") == 5) DoEffectLarge(asName, asConnectEntity);
			else DoEffectSmall(asName, asConnectEntity);
		}
	} 
	
	/*START WHAT HAPPENS WHEN VAVLES ARE TURNED OFF
	 */
	else if(alState == -1){

		 /*Mark valve as off
		  */
		SetLocalVarInt(asMainEntity, 0);
		
		AddLocalVarInt("ValvesNrOn", -1);
		
		DestroyParticleSystem(asName+"PSteam");
		StopSound(asName+"SBoil",1); StopSound(asName+"SSteam",1);
		
		/*If valved turned off in the right order, allow for attempt at turning the next valve in the correct order
		 */
		if(asMainEntity == "Valve_1" && GetLocalVarInt("RoadToSuccess") == 2) AddLocalVarInt("RoadToSuccess", 1);
		
		else if(asMainEntity == "Valve_2" && GetLocalVarInt("RoadToSuccess") == 4) AddLocalVarInt("RoadToSuccess", 1);	
		
		else if(asMainEntity == "Valve_3" && GetLocalVarInt("RoadToSuccess") == 6){ //Full sequence correct, spit out the chemical substance
			SetWheelStuckState("ValveIgnite", -1, true); 

			PlaySoundAtEntity("FinalBoil","puzzle_boil.snt", "Valve_4_AreaValve", 1, false);
			
			CreateParticleSystemAtEntity("FinalSteam", "ps_acid_machine_bubble_large02.ps", "Valve_4_AreaValve", false); 
			CreateParticleSystemAtEntity("FinalFlow", "ps_acid_machine_bubble_end.ps", "AreaCompleteSuccess", false); 
			
			FadeLightTo("LightBurn", -1, 1, -1, -1, 3.0f, 5);
			FadeLightTo("LightAcid", -1, -1, -1, -1, 0.3f, 2);
			
			AddTimer("done", 2, "TimerAcidDone");	
		} 
		else if(asMainEntity == "Valve_4" && GetLocalVarInt("RoadToSuccess") == 6) AddLocalVarInt("RoadToSuccess", -1);
		
		/*If all valves are off, reset the machine
		 */
		if((GetLocalVarInt("Valve_1")+GetLocalVarInt("Valve_2")+GetLocalVarInt("Valve_3")+GetLocalVarInt("Valve_4")) == 0 )
			SetLocalVarInt("RoadToSuccess", 0);
	}
	
	AddDebugMessage("Rate of success "+GetLocalVarInt("RoadToSuccess"), false);
	AddDebugMessage(asMainEntity+" is turned to "+alState, true);
}
/*Large effects as correct valve rotated
 */
void DoEffectLarge(string &in asName, string &in asWhere)
{
	CreateParticleSystemAtEntity(asName+"PSteam", "ps_acid_machine_bubble_large.ps", asWhere, false); 
	
	PlaySoundAtEntity(asName+"SBoil","puzzle_boil_low.snt", asWhere, 1, false);
	PlaySoundAtEntity(asName+"SSteam","puzzle_gas.snt", asWhere, 1, false);
	
	AddLocalVarInt("RoadToSuccess", 1); 
}
/*Small effects as incorrect valve rotated
 */
void DoEffectSmall(string &in asName, string &in asWhere)
{
	CreateParticleSystemAtEntity(asName+"PSteam", "ps_acid_machine_bubble_small.ps", asWhere, false); 
	
	PlaySoundAtEntity(asName+"SBoil","puzzle_boil_low.snt", asWhere, 1, false);
}
/*When reseting machine on more than 2 valves turned, this timer turns it on again
 */
void TimerReleaseValves(string &in asTimer)
{
	for(int i=1;i<=4;i++) SetWheelStuckState("Valve_"+i, 0, false);  
	
	SetLocalVarInt("RoadToSuccess", 0);
}
/*The acid spit on success, if no jar present the acid will just spill and it is possible to try again
 */
void TimerAcidDone(string &in asTimer)
{
	DestroyParticleSystem("Part4PSteam");
	DestroyParticleSystem("FinalSteam");

	PlaySoundAtEntity("AcidDone","puzzle_acid", "AreaCompleteSuccess", 0, false);
	
	StopSound("FinalBoil",1);
	
	FadeLightTo("LightAcid", -1, -1, -1, -1, 0, 4);
	FadeLightTo("LightBurn", -1, 0.3f, -1, -1, 0, 3);
	
	SetWheelStuckState("ValveIgnite", 0, true); 
	
	if(GetLocalVarInt("chemical_container_static_1") == 1){
		SetEntityActive("chemical_container_static_1", false);
		SetEntityActive("chemical_container_2", true);
		//SetPropActiveAndFade("chemical_container_static_1", false, 0.5f);
		//SetPropActiveAndFade("chemical_container_2", true, 0.5f);
	
		PlaySoundAtEntity("AcidSuccess","puzzle_acid_success", "AreaCompleteSuccess", 0, false);
		CompleteQuest("AcidPotion","AcidPotionCompleted");
		//GiveSanityBoostSmall();
		
		SetWheelStuckState("ValveIgnite", -1, true); 
		
	} 
	else {
		PlaySoundAtEntity("AcidFail","puzzle_acid_fail", "AreaCompleteSuccess", 0, false);
		SetMessage("Ch03Level26", "NoContainerBelowSqueezer", 0);
	}
}
void PickFinalAcid(string &in asEntity, string &in asType)
{
	GiveSanityBoostSmall();
	
	SetGlobalVarString(asEntity, asEntity);
	AddQuest("SpiderWeb","SpiderWeb");
	
	AddTimer("Thunder", 0.75f, "TimerEnterClank");
}
void EntityCallPickEmptyChem(string &in asEntity, string &in type)
{
	GiveSanityBoostSmall();
}

void EntityCallPickNote(string &in asEntity, string &in type)
{
	AddQuest("AcidPotion","AcidPotion");
}
void EntityCallPickNote02(string &in asEntity, string &in type)
{
	if(GetLocalVarInt("QuestMovedIngredients") == 0)
	{
		AddQuest("IngredientsMoved","IngredientsMoved");
		SetLocalVarInt("QuestMovedIngredients", 1);
	}
}
//END ACID MACHINE//
////////////////////

//////////////////////
//BEGIN BREAK STAIRS//
void CollideBreakStairs(string &in asParent, string &in asChild, int alState)
{
	//if(GetGlobalVarString("key_study_1") != "key_study_1") return;
	
	BreakMyStairs();
}
void BreakMyStairs()
{
	if(GetLocalVarInt("StairsWentDownTheDrain") == 1) return;
	
	SetEntityActive("cave_in_1", false);
	SetEntityActive("cavedx_*", true);
	
	SetEntityActive("AreaQuestStairs", true);
	
	PlaySoundAtEntity("stairsS", "break_stairs.snt", "AreaStairsParticle", 0.5f, false);
	
	CreateParticleSystemAtEntity("stairsPS", "ps_dust_break_stair.ps", "AreaStairsParticle", false);
	
	SetPropHealth("stairs_wood_1", 0);
	AddTimer("sanitystairs", 1, "TimerSanityStairs");
	
	SetEntityPlayerInteractCallback("PlatformDynStickLift_1", "GiveStackHint", true);
	SetEntityPlayerInteractCallback("PlatformDynStickLift_2", "GiveStackHint", true);
	
	SetEntityActive("StickLift_1", true);
	
	SetLocalVarInt("StairsWentDownTheDrain", 1);
	
	RemoveTimer("rockbreath");
	
	//Turn off some lights!
	SetLampLit("torch_static01_16", false, true);
	SetLampLit("torch_static01_13", false, true);
	SetLampLit("torch_static01_12", false, true);
	SetLampLit("torch_static01_14", false, true);
}
void TimerSanityStairs(string &in asTimer)
{
	GiveSanityDamage(10, true);
}

void GiveStackHint(string &in entity)
{
	GiveHint("stackhint", "Hints", "StickyArea", 0);
}

/*Extra space to stick the one for the ladder area
 */
void CollideStickLiftExtra(string &in asParent, string &in asChild, int alState)
{
	string sArea = StringSub(asChild, 0, 11);

	AddDebugMessage("Name: " + sArea, false);
	
	if(GetLocalVarString("StickOneTime") == sArea) return;
	SetLocalVarString("StickOneTime", sArea);
	
	SetEntityActive(sArea, false);
	
	AddTimer(asParent+"_Body_1", 0.35f, "TimerChangeEntity");		
	AddTimer(sArea, 0.35f, "TimerChangeEntity");
}

void CollideStickLift(string &in asArea, string &in asBody)
{
	/*Only allow one board to be stuck to an area
	 */
	if(GetLocalVarString("StickOneTime") == asArea) return;
	SetLocalVarString("StickOneTime", asArea);
	
	/*Remove object with grab and activate object with static and joint
	 */
	AddTimer(asBody, 0.35f, "TimerChangeEntity");
	AddTimer(asArea, 0.35f, "TimerChangeEntity");
}
void TimerChangeEntity(string &in asTimer)
{	
	if(asTimer == "PlatformDynStickLift_1_Body_1") SetEntityActive("PlatformDynStickLift_1", false);
	else if(asTimer == "PlatformDynStickLift_2_Body_1") SetEntityActive("PlatformDynStickLift_2", false);

	if(asTimer == "StickLift_2") SetEntityActive("LadderArea_2", true);
	
	SetEntityActive("Platform"+asTimer, true);
}

void CollideQuestStairs(string &in asParent, string &in asChild, int alState)
{
	AddQuest("Stairs", "Stairs");
	
	SetEntityActive("AreaQuestStairs_2", true);
}
void CollideQuestStairs02(string &in asParent, string &in asChild, int alState)
{
	CompleteQuest("Stairs", "StairsCompleted");
}
//END BREAK STAIRS//
////////////////////

///////////////////////////////
//BEGIN CREAKING WOOD CEILING//
/*Start the creak sounds + ps when entering basement, stop them when leaving the basement/area
 */
void FuncCreakHorrors(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "EnterCreakOnArea") {
		float fCreak = RandFloat(0.5f,6.5f);
	
		AddTimer("creak", 2.5f+fCreak, "FuncCreakTimer");
		
		AddEntityCollideCallback("Player", "EnterCreakOffArea", "FuncCreakHorrors", true, 1);
		
	} else {
		RemoveTimer("creak");
		
		AddEntityCollideCallback("Player", "EnterCreakOnArea", "FuncCreakHorrors", true, 1);
	}
	
	/*DEBUG
	 */
	AddDebugMessage("Player in/out creak: "+asChild, true);
}
/*Random placment of creak at random time
 */
void FuncCreakTimer(string &in asTimer)
{
	int iCreak = RandFloat(1, 7);	
	float fCreak = RandFloat(4.5f,14.5f);
	
	CreateParticleSystemAtEntity("creakPS"+iCreak, "ps_dust_falling_small_thin.ps", "HorrorCreak_"+iCreak, false);
	
	PlaySoundAtEntity("creakSound"+iCreak, "scare_wood_creak_mix.snt", "HorrorCreak_"+iCreak, 0.0f, false);
	
	AddTimer("creak", 5.5f+fCreak, "FuncCreakTimer");
	
	/*DEBUG
	 */
	AddDebugMessage("Now creaking in area: "+iCreak+" Next creak in: "+(5.5f+fCreak), true);
}	
//END CREAKING WOOD CEILING//
/////////////////////////////


//BEING MISC//
void InteractTouchIt(string &in asEntity)
{
	PlayGuiSound("impact_organic_low2.ogg", 0.5f);
	
	//SetMessage("Ch01Level05", "TouchIt", 0);
	
	AddTimer(asEntity, 1.0f, "TimerTouchIt");
}
void TimerTouchIt(string &in asTimer)
{
	SetEntityPlayerInteractCallback(asTimer, "InteractTouchIt", true);
}
//END MISC//

////////////////////////////
// Run first time starting map
void OnStart()
{
	SetMapDisplayNameEntry("LevelWineCellar");
	
	//----COLLIDE CALLBACKS----//
	AddEntityCollideCallback("Player", "AreaRemoveDoorEvent", "CollideAreaRemoveDoorEvent", false, 1);
	AddEntityCollideCallback("AreaUnlockDoor", "BarrelBlock", "FuncUnlockDoor", true, -1);	//Barrel blocking door, move it out area to unlock door
	AddEntityCollideCallback("Player", "AreaBeginMoan", "FuncMoanHorrors", true, 1);	//Big area in first room to trigger moans
	for(int i=1;i<=3;i++) AddEntityCollideCallback("Player", "AreaBlockDoor_"+i, "CollideBlockDoor", false, 1);	//Three areas for barrel selection 
	AddEntityCollideCallback("Player", "AreaLoft", "CollideLoft", true, 1);	//Trigger event on loft
	AddEntityCollideCallback("Player", "AreaCeilingActivate", "CollideActiveCeiling", false, 0);	//Activate lookat area for corpses in ceiling
	AddEntityCollideCallback("Player", "AreaHoleEvents", "CollideHoleEvents", true, 1);	//Debris and particles from ceiling hole
	AddEntityCollideCallback("Player", "AreaBangDoor", "CollideBangDoor", true, 1);	//Begin the door bang and pain event
	AddEntityCollideCallback("Player", "AreaEnemyHint", "CollideEnemyHint", false, 1);	//Display hint about enemies
	AddEntityCollideCallback("Player", "AreaGiveSanity", "CollideGiveSanity", true, 1);	//Display hint about enemies
	AddEntityCollideCallback("Player", "AreaActivateFirstEnemy", "CollideActivateGrunt", true, 1);
	
	AddEntityCollideCallback("Player", "EnterCreakOnArea", "FuncCreakHorrors", true, 1);
	AddEntityCollideCallback("Player", "AreaBreakStairs", "CollideBreakStairs", false, 1);
	AddEntityCollideCallback("Player", "AreaLookHoleActive", "CollideActiveHole", true, 1);
	AddEntityCollideCallback("Player", "AreaBeginSpider", "CollideActivateSpider", true, 1);
	AddEntityCollideCallback("Player", "AreaQuestStairs", "CollideQuestStairs", true, 1);
	AddEntityCollideCallback("Player", "AreaQuestStairs_2", "CollideQuestStairs02", true, 1);
	AddEntityCollideCallback("Player", "AreaScreamCave", "CollideScreamCave", true, 1);
	AddEntityCollideCallback("Player", "AreaClank", "CollideClank", true, 1);
	
	AddEntityCollideCallback("PlatformDynStickLift_1", "StickLift_2_Extra", "CollideStickLiftExtra", true, 1);
	AddEntityCollideCallback("PlatformDynStickLift_2", "StickLift_2_Extra", "CollideStickLiftExtra", true, 1);

	AddEntityCollideCallback("character_infected_1", "AreaEnemyEvent_3", "CollideDeactivateEnemy", true, 1);	//Begin the door bang and pain event
	
	SetEntityPlayerLookAtCallback("AreaCeiling", "LookAtCeiling", false);
	SetEntityPlayerInteractCallback("cellar_wood01_3", "InteractDoorWithGruntBehind", true);
	SetEntityPlayerInteractCallback("cellar_wood01_4", "InteractDoorToHole", true);
	
	//---- ENTITY INIT ----//
	SetEntityInteractionDisabled("BarrelAreaBlockDoor_1", true);
	SetEntityInteractionDisabled("BarrelAreaBlockDoor_2", true);
	SetEntityInteractionDisabled("BarrelAreaBlockDoor_3", true);
	
	for(int i=1;i<=4;i++) {
		ConnectEntities("Part_"+i, "Valve_"+i, "Valve_"+i+"_AreaValve", false, 0, "InteractTurnValve"); 
		
		SetWheelStuckState("Valve_"+i, -1, false);
	}
	ConnectEntities("Ignite", "ValveIgnite", "Valve_1_AreaBottle", false, 0, "InteractTurnOnAcidMachine");
	
	SetEntityActive("chemical_container_static_1", false);
	SetEntityActive("chemical_container_2", false);
	
	SetWheelStuckState("ValveIgnite", -1, false);

	AddUseItemCallback("placebottle", "chemical_container_1", "AreaUseMachine", "ItemJarOnMachine", true);
	AddUseItemCallback("placebottle2", "chemical_container_1", "AreaPlaceJar", "ItemJarOnMachine", true);
	AddUseItemCallback("placebottle3", "chemical_container_1", "ValveIgnite", "ItemJarOnMachine", true);
	
	for(int i=1;i<=4;i++) {
		AddUseItemCallback("placebottlev"+i, "chemical_container_1", "Valve_"+i, "ItemJarOnMachine", true);
		AddUseItemCallback("Chemicalvi_"+i, "Chemical_"+i, "ValveIgnite", "AddChemical", true);
		AddUseItemCallback("Chemicala_"+i, "Chemical_"+i, "AreaUseMachine", "AddChemical", true);
		AddUseItemCallback("Chemicalm_"+i, "Chemical_"+i, "acid_machine_1", "AddChemical", true);
		
		for(int j=1;j<=4;j++)
			AddUseItemCallback("Chemicalv_"+i, "Chemical_"+i, "Valve_"+j, "AddChemical", true);
	}
	
	SetEntityPlayerInteractCallback("ValveIgnite", "InteractAcidMachine", false);
	for(int i=1;i<=4;i++) SetEntityPlayerInteractCallback("Valve_"+i, "InteractAcidMachine", false);	
	
	BlockHint("EntityWheel");
	
	//---- ENEMY INIT ----//
	
	
	
	//----SOUND INIT----//
	//PlaySoundAtEntity("amb_sound1", "05_amb1", "AreaAmb", 10, true);	//So that the sound can be faded out/in
	//PlaySoundAtEntity("amb_sound2", "05_amb2", "AreaAmb", 10, true);	//So that the sound can be faded out/in

															
	//----ROPE CREATION----//
	/*Hanging chains in room with corpses in ceiling
	 */
	/*for(int i=1;i<=6;i++) CreateRope("Rope0"+i, "RopeStart_"+i, "RopeEnd_"+i, "", "invisible_body_"+i+"_Body_1", //StartBody, EndBody
		0.5, 4.5, 0.2, 0.001, 100, 1, 					//Min total length, Max total length, Segment size, Damping, Strength, Stiffness
		"textures/ropes/chain.mat", 0.025, 0.5, 0.5, //Material, Radius, LengthTileAmount, LengthTileSize
		"",	0.49, 0.45,									//Sound, Sound start speed, Sound stop speed
		true, 5, 3 										//Automove, Automove acc, Automove max speed
		);*/
	
	//---- TIMER INIT ----//
	AddTimer("TimerChain", 1, "TimerChain");	//Push chains to make them swagel a bit
	AddTimer("AreaBeginBlood_1", 0.1f, "TimerBloodDrop");	//Drip blood from corpses
	AddTimer("creak", 1, "CreakTimer");		//Creaking from the floor above
	
	//----QUEST INIT----//
	SetNumberOfQuestsInMap(2);
	
	//----VARIABLES ----//
	SetLocalVarString("WhatBarrel", "AreaBlockDoor_2");	//A default barrel selected for debris event, incase player does not touch an area
	SetGlobalVarInt("PlayerBeenInLevel05",1);
	
	//---- FOG SETUP ----//
	SetFogActive(true);
	SetFogColor(0.15, 0.16, 0.18, 1);
	SetFogProperties(6, 22, 1, false);
	
	//Remove the dakrness hint, so the player can get it once more!
	RemoveHint("DarknessDecrease");
	
	/* TODO: This stays commented just in case it is needed in the future (read comment below)
	// Disable interaction with barrels, just in case the player tries to bring em down before triggering the event (Luis: I managed to do this and we really dont want the player to watch in fear a barrel lying still on the floor :P)
	SetEntityInteractionDisabled("BarrelAreaBlockDoor_1", true);
	SetEntityInteractionDisabled("BarrelAreaBlockDoor_2", true);
	SetEntityInteractionDisabled("BarrelAreaBlockDoor_3", true);
	*/
	 
	if(ScriptDebugOn())
	{
		GiveItemFromFile("lantern", "lantern.ent");
		for(int i=0;i<10;i++) GiveItemFromFile("tinderbox_"+i, "tinderbox.ent");
		
		//SetEntityActive("FlashbackArea_1", false);
	}
}


////////////////////////////
// Run when entering map
void OnEnter()
{	
	//----PRELOADING----//
	PreloadSound("scare_male_terrified5"); PreloadSound("scare_male_terrified"); PreloadSound("scare_steps_big"); PreloadSound("scare_wood_creak_mix"); 
	PreloadSound("scare_tingeling"); PreloadSound("01_whirl"); PreloadSound("general_rock_rumble"); PreloadSound("05_rock_fall"); 
	PreloadSound("05_rock_fall_2"); PreloadSound("scare_slam_door"); PreloadSound("react_breath"); PreloadSound("roll_wood"); 
	PreloadSound("player_falldamage_max"); PreloadSound("player_bodyfall"); PreloadSound("05_cloud_swarm"); 
	PreloadSound("00_creak"); PreloadSound("react_pant"); PreloadSound("05_amb1"); PreloadSound("05_amb2"); 
	PreloadSound("player_climb"); PreloadSound("05_cloud"); PreloadSound("03_orb_loop"); PreloadSound("03_in_a_bottle"); 
	PreloadSound("general_blood_drop"); PreloadSound("05_whine"); PreloadSound("05_event_bottles"); PreloadSound("scare_wood_creak_walk"); 
	PreloadSound("05_event_door_bang"); PreloadSound("05_wall_scratch"); PreloadSound("scare_whine_loop"); PreloadSound("close_door"); 
	PreloadSound("grunt/amb_idle"); 

	PreloadParticleSystem("ps_dust_falling_small"); PreloadParticleSystem("ps_dust_whirl_large"); PreloadParticleSystem("ps_break_mansionbase_wall"); 
	PreloadParticleSystem("ps_ghost_release"); PreloadParticleSystem("ps_blood_drop"); PreloadParticleSystem("ps_dust_falling_hole"); 
	PreloadParticleSystem("ps_dust_impact_vert"); 
	
	PreloadParticleSystem("ps_dust_break_stair"); PreloadParticleSystem("ps_acid_machine_bubble_large02");
	PreloadParticleSystem("ps_acid_machine_bubble_end"); PreloadParticleSystem("ps_acid_machine_bubble_large"); PreloadParticleSystem("ps_acid_machine_bubble_small"); 
	
	SetWheelStuckState("ValveIgnite", -1, false);
	
	PreloadSound("scare_male_terrified"); PreloadSound("scare_baby_cry"); PreloadSound("scare_wood_creak_mix"); PreloadSound("break_stairs"); 
	PreloadSound("puzzle_place_jar"); PreloadSound("puzzle_add_chemical"); PreloadSound("general_fire_burning_low"); PreloadSound("general_thunder"); 
	PreloadSound("04_big_feet"); PreloadSound("puzzle_boil"); PreloadSound("puzzle_gas"); PreloadSound("puzzle_boil_low"); 
	PreloadSound("puzzle_acid"); PreloadSound("puzzle_acid_success"); PreloadSound("puzzle_acid_fail"); PreloadSound("04_hole_squeal"); 
	PreloadSound("04_water_puff"); PreloadSound("react_breath"); PreloadSound("01_tiny2"); PreloadSound("spider_die"); 
	PreloadSound("04_enter_clank");
	
	//----AUDIO----//
	PlayMusic("amb_darkness", true, 1, 5, 0, true);
	//AutoSave();
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
	SetEntityActive("grunt_normal_1", false);	//Just incase player would be very very fast and throw a box at enemy during event.
}