//-------------------------------------------------------

///////////////////////////////////////////////
// OLD ARCHIVES
///////////////////////////////////////////////

//-------------------------------------------------------

void TimerLanternQuest(string &in asTimer)
{
	AddQuest("Lantern","Lantern");
}

void PickLantern(string &in asEntity, string &in asType)
{	
	GiveSanityBoostSmall();
	
	CompleteQuest("Lantern","LanternCompleted");
	
	AddEntityCollideCallback("Player", "AreaActivateLastPiano", "CollideLastPiano", true, 1);
}

/////////////////////////////////
//BEGIN OPENING DOORS WITH DUST//
/*Some dusts flows out and door bangs open 
 */
void CollideOpeningDustDoor(string &in asParent, string &in asChild, int alState)
{
	CreateParticleSystemAtEntity("PSDoor_1", "ps_dust_paper_blow.ps", "AreaDoor_1", false);
	CreateParticleSystemAtEntity("PSDoor_2", "ps_dust_push.ps", "AreaDoor_1", false);
	
	PlaySoundAtEntity("SoundDoor_1", "scare_wind_reverse", "AreaDoor_1", 1.0f, false);
	PlaySoundAtEntity("creaking_door", "joint_door_move_special.snt", "Door_1", 1.0 / 2.5f, false);
	PlaySoundAtEntity("SoundBong", "scare_tingeling.snt", "Player", 0.0f, false);
	
	AddTimer("opendoor_1", 0.25f, "TimerOpenDoor01");
	AddTimer("lightsout", 1, "TimerOpenDoor01");
	PlaySoundAtEntity("SoundCloseDoor_1", "scare_slam_door", "Door_1",0.0f, false);
	
	/*For CollideBeginSwirl
	 */
	
	/*DEBUG
	 */
	AddDebugMessage("The door at "+asChild+" opens with dust", true);
}
void TimerOpenDoor01(string &in asTimer)
{
	if(asTimer == "lightsout"){
		for(int i=1;i<=4;i++) SetLampLit("torch_static01_"+i, false, true);
		return;
	}
	
	PlaySoundAtEntity("Wind", "general_wind_whirl", "Player", 2, false);

	StopSound("creaking_door", 1.0f);
	
	CreateParticleSystemAtEntity("PSDoor_3", "ps_dust_push.ps", "AreaDoor_2", false);
	CreateParticleSystemAtEntity("PSDoor_4", "ps_dust_push.ps", "AreaDoor_3", false);
	
	SetSwingDoorClosed("Door_1", false, false);
	SetSwingDoorDisableAutoClose("Door_1", true);
	
	AddTimer("Door_1", 0.01f, "TimerSwingDoor");
	
	GiveSanityDamage(10, true);
}
void TimerSwingDoor(string &in asTimer)
{
	if(GetLocalVarInt("SwingDoor") == 10){
		SetLocalVarInt("SwingDoor", 0);
		return;
	}
	
	if(asTimer == "Door_1") AddPropForce(asTimer, 160.0f, 0, 0, "World"); 
	else AddPropForce(asTimer, -60.0f, 0, 0, "World"); 
	
	AddLocalVarInt("SwingDoor", 1);
	
	AddTimer(asTimer, 0.03f, "TimerSwingDoor");
	
	AddDebugMessage("Swing: "+GetLocalVarInt("SwingDoor"), false);
}
//END OPENING DOORS WITH DUST//
///////////////////////////////



////////////////////////////
//START CLOSING DOOR SCARE//
/*Player in area in abandoned storage and door closes + scare event
 */
void CollideBeginSwirl(string &in asParent, string &in asChild, int alState)
{
	PlayMusic("amb_scary.ogg", true, 1.0f, 0, 0, true);
	
	if(!GetSwingDoorClosed("Door_1")) PlaySoundAtEntity("SoundCloseDoor_1", "scare_slam_door", "Door_1",0.0f, false);
	
	SetSwingDoorLocked("Door_1", true, true);

	AddTimer("swirl", 0.5f, "TimerSwirlHorror");
}
void TimerSwirlHorror(string &in asTimer)
{
	AddLocalVarInt("VarSwirl", 1);	//What step to play in the event
	float fSpeedWhirl = 0.5f;	//The default time between steps in an event
	
	switch(GetLocalVarInt("VarSwirl")) {
		case 1:
			CreateParticleSystemAtEntity("PSSwirl", "ps_dust_ghost.ps", "Player", false);
			PlaySoundAtEntity("SoundBong2", "scare_tingeling_rev2.snt", "Player", 0.0f, false);
			fSpeedWhirl = 3.0f;
		break;
		case 2:
			StartEffectFlash(0.15f, 0.05f, 0.15f);
			PlaySoundAtEntity("SoundFlash1", "scare_thump_flash.snt", "Player", 0.0f, false);
			SetPropActiveAndFade("cockroach_*", true, 0.5f);
			FadeLightTo("BoxLight_1",0.5f,0.25f,0,1,-1,0.01f);
		break;
		case 3:
			FadeOut(0.75f);
			GiveSanityDamage(10, true);
			FadeLightTo("BoxLight_1",0,0,0,0,-1,0.01f);
			SetPropActiveAndFade("cockroach_*", false, 0.5f);
		break;
		case 4:
			FadeIn(1);
			//FadeLightTo("BoxLight_1",0.75f,0.25f,0,1,-1,0.01f);
			SetPropActiveAndFade("cockroach_*", true, 0.5f);
			fSpeedWhirl = 0.15f;
		break;
		case 5:
			FadeLightTo("BoxLight_1",0,0,0,0,-1,0.01f);
			fSpeedWhirl = 2.5f;
		break;
		case 6:
			FadeOut(0.8f);
			StartEffectFlash(0.15f, 0.25f, 0.05f);
			FadeLightTo("BoxLight_1",0.75f,0,0.15f,1,-1,0.01f);
			PlaySoundAtEntity("SoundFlash1", "scare_thump_flash.snt", "Player", 0.0f, false);
		break;
		case 7:
			FadeIn(1);
			FadeLightTo("BoxLight_1",0,0,0,0,-1,0.01f);
			SetPropActiveAndFade("cockroach_*", false, 1);
			//StopSound("SoundSwirl", 1.5f);
			fSpeedWhirl = 1.0f;
		break;
		case 8:
			StopMusic(1, 0);
			SetSwingDoorLocked("Door_1", false, true);
			fSpeedWhirl = 1.0f;
		break;
		case 9:
			PlayMusic("amb_darkness.ogg", true, 1.0f, 0, 0, true);
			fSpeedWhirl = 1.0f;
		break;
		case 10:
			/* AddLocalVarInt("VarEventsDone", 1); //Makes sure the event to notice the player of a door opening is only played when no other main event occurs.
			if(GetLocalVarInt("VarEventsDone") == 3) DoDoorOpening(10); */
		break;
	}

	if(GetLocalVarInt("VarSwirl") < 10) AddTimer("swirl", fSpeedWhirl, "TimerSwirlHorror");
}
//END CLOSING DOOR SCARE//
//////////////////////////



/////////////////////
//BEGIN BEGIN GHOST//
/*In aban study, steps is seen and book thrown.
 */
void CollideBeginGhost(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("SoundScratch_5", "scare_scratch", "AreaGhostWind", 2, false);
	PlaySoundAtEntity("whirly", "01_whirl.snt", "Player", 4, false);
	PlayMusic("01_event_dust.ogg", false, 1, 3, 10, false);
	CreateParticleSystemAtEntity("PSGhostWind", "ps_dust_whirl_large.ps", "AreaGhostWind", false);
	AddTimer("ghost", 0.2f, "TimerGhost");
	RemoveTimer("wall_scrape");
}
int iLoopGhost = 1;	//If a step should loop, 1 as it is used for selecting what area to begin footsteps in
void TimerGhost(string &in asTimer)
{
	AddLocalVarInt("VarGhost", 1);	//What step to play in the event
	float fSpeedGhost = 0.5f;	//The default time between steps in an event

	switch(GetLocalVarInt("VarGhost")) {
		case 1:
			FadeOut(20);
			PlaySoundAtEntity("SoundScratch_2", "scare_scratch_intense", "AreaScratch_1", 4, false);
		break;
		case 2:
			PlaySoundAtEntity("SoundFear2", "scare_male_terrified.snt", "AreaGhostStep_1", 0, false);
			PlaySoundAtEntity("DustBoom1", "scare_wall_stomp.snt", "AreaDustBoom_1", 0.5f, false);
			AddPropForce("ghostbook_1", 50, 100, 50, "world");
			CreateParticleSystemAtEntity("PSDustBoom1", "ps_dust_impact_vert.ps", "AreaDustBoom_1", false);
			StartScreenShake(0.01f,0.1f, 0.5,0.9f);
		break;
		case 3:
		break;
		case 4:
			PlaySoundAtEntity("DustBoom2", "scare_wall_stomp.snt", "AreaDustBoom_2", 0.25f, false);
			PlaySoundAtEntity("SoundFear3x", "scare_male_terrified.snt", "AreaGhostStep_1", 1, false);
			AddPropForce("ghostbook_2", 50, 100, 70, "world");
			AddPropForce("ghostbook_3", 50, 100, 60, "world");
			CreateParticleSystemAtEntity("PSDustBoom2", "ps_dust_impact_vert.ps", "AreaDustBoom_2", false);
			StartScreenShake(0.02f,0.1f, 0.5,0.9f);
			PlaySoundAtEntity("SoundScratch_3", "scare_scratch", "AreaScratch_2", 2, false);
		break;
		case 5:
			MovePlayerHeadPos(0, 0, 0, 0.1f, 0.5f);
			FadeIn(5);
			PlaySoundAtEntity("SoundGhostScream", "scare_ghost.snt", "AreaGhostStep_1", 0.0f, false);
		break;
		case 6:
			PlaySoundAtEntity("SoundFear4x", "scare_male_terrified5.snt", "AreaGhostStep_1", 1, false);
			fSpeedGhost = 1.5f;
		break;
		case 7:
			PlaySoundAtEntity("DustBoom4", "scare_wall_stomp.snt", "AreaDustBoom_4", 0, false);
			GiveSanityDamage(10, true);
			CreateParticleSystemAtEntity("PSDustBoom4", "ps_dust_impact.ps", "AreaDustBoom_4", false);
			StartScreenShake(0.04f,0.1f, 0.5,0.9f);
			FadeOut(15);
			fSpeedGhost = 1.5f;
		break;
		case 8:
			PlaySoundAtEntity("DustBoom3", "scare_wall_stomp.snt", "AreaDustBoom_3", 0.1f, false);
			CreateParticleSystemAtEntity("PSDustBoom3", "ps_dust_impact_vert.ps", "AreaDustBoom_3", false);
			AddPropForce("ghostbook_4", 30, 120, 70, "world");
			StartScreenShake(0.03f,0.1f, 0.5,0.9f);
		break;
		case 9:
			StopPlayerLookAt();
			StartScreenShake(0.02f,0.1f, 2,2);
			AddTimer("wall_scrape", RandFloat(3.0f,15.0f), "TimerWallScrape");	
			for(int i=1;i<=5;i++) StopSound("SoundScratch_"+i, 4.0f);
			StopSound("whirly", 4.0f);
			StopMusic(8, 10);
			fSpeedGhost = 1.5f;
		break;
		case 10:
			FadeIn(5);
			PlayMusic("amb_darkness", true, 1, 0.1f, 0, true);
			/* AddLocalVarInt("VarEventsDone", 1); //Makes sure the event to notice the player of a door opening is only played when no other main event occurs.
			if(GetLocalVarInt("VarEventsDone") == 3) DoDoorOpening(6); */
		break;
	}
	
	if(GetLocalVarInt("VarGhost") < 10)  AddTimer("ghost", fSpeedGhost, "TimerGhost");
}
//END BEGIN GHOST//
///////////////////



///////////////////////
//BEGIN EFFECT TIMERS//
void TimerWallScrape(string &in asTimer)
{
	int iArea = RandFloat(1,6);
	
	PlaySoundAtEntity("wall_scrape"+iArea, "scare_wall_crawl_single.snt", "AreaWallScrape_"+iArea, 0.0f, false);
	
	AddTimer("wall_scrape", RandFloat(3.0f,15.0f), "TimerWallScrape");	
}
void TimerBeginWind(string &in asTimer)
{
	PlaySoundAtEntity("BeginWindSound", "general_wind_whirl.snt", "Player", 4.0f, false);
}
//END EFFECT TIMERS//
/////////////////////


///////////////////
//BEGIN LAST WIND//
void CollideLastWind(string &in asParent, string &in asChild, int alState)
{
	//if(GetLocalVarInt("VarPicked") != 2) return;
	
	CreateParticleSystemAtEntity("PSLastWind", "ps_dust_push.ps", "AreaWindLast", false);
	CreateParticleSystemAtEntity("PSLastWind2", "ps_dust_paper_blow.ps", "AreaWindLast", false);
	PlaySoundAtEntity("LastWindSound", "general_wind_whirl.snt", "AreaWindLast", 3.0f, false);
}
//END LAST WIND//
/////////////////


/////////////////////
//BEGIN MISC THINGS//
void CollideHintLean(string &in asParent, string &in asChild, int alState)
{
	GiveHint("lean", "Hints", "LeanHint", 0);
}
//END MISC THINGS//
///////////////////




//-------------------------------------------------------

///////////////////////////////////////////////
// ARCHIVES
///////////////////////////////////////////////

//-------------------------------------------------------



//////////////////////////
//BEGIN MANY BOOKS SCARE//
void CollideBeginManyBook(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("SoundScratchx_1", "scare_scratch", "throwbook_13", 0.5f, false);
	
	PlayMusic("03_event_books.ogg", false, 0.7f, 0, 10, false);
	
	AddTimer("manybooks", 3, "TimerManyBooks");
	
	//DEBUG
	AddDebugMessage("Begin Many Books Scare ", true);
}
void TimerManyBooks(string &in asTimer)
{
	AddLocalVarInt("VarMany", 1);	//What step to play in the event
	float fSpeedMany = 0.5f;	//The default time between steps in an event
	
	switch(GetLocalVarInt("VarMany")) {
		case 1:
			CreateParticleSystemAtEntity("PSGhostBang", "ps_break_wood.ps", "throwbook_14", false);
			PlaySoundAtEntity("SoundBang", "break_wood.snt", "throwbook_13", 0.0f, false);
			fSpeedMany = 0.2f;
		break;
		case 2:
			GiveSanityDamage(10, true);
			for(int i=1;i<=5;i++) AddPropForce("throwbook_"+i, -100, 50, 0, "world");
			fSpeedMany = 0.2f;
		break;
		case 3:
			for(int i=6;i<=10;i++) AddPropForce("throwbook_"+i, -200, 120, -50, "world");
			fSpeedMany = 0.1f;
		break;
		case 4:
			for(int i=11;i<=15;i++) AddPropForce("throwbook_"+i, -300, 200, 50, "world");
			FadeLightTo("BoxLight_4",1,0,0.2f,1,-1,0.1f);
			fSpeedMany = 0.2f;
		break;
		case 5:
			StartEffectFlash(0.05f, 0.15f, 0.05f);
			PlaySoundAtEntity("SoundFlash1", "scare_thump_flash.snt", "Player", 0, false);
			fSpeedMany = 0.8f;
		break;
		case 6:
			FadeLightTo("BoxLight_4",0,0,0,0,-1,0.1f);
			StopSound("SoundFearx2", 2);
			StopSound("SoundScratchx_1", 2);
			SetPropActiveAndFade("throwbook_*", false, 2);
		break;
	}

	if(GetLocalVarInt("VarMany") < 6) AddTimer("manybooks", fSpeedMany, "TimerManyBooks");
}
//END MANY BOOKS SCARE//
////////////////////////


/////////////////////
//BEGIN PIANO MUSIC//
void CollideBeginPiano(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "AreaSecondPiano"){
		SetLeverStuckState("piano_2", 0, false);
		AddBodyImpulse("piano_2_BodyLid", 0,100, 0, "world");
		
		PlaySoundAtEntity("SoundPiano2", "general_piano02.snt", "AreaPlayPiano", 0.0f, false);
		//PlaySoundAtEntity("SoundWind", "general_wind_whirl.snt", "AreaPlayPiano", 0.5f, false);
		PlaySoundAtEntity("SoundWind", "scare_wall_scratch_single", "AreaPlayPiano", 0.5f, false);
		
		SetEntityActive("chair_nice01_12",	false);
		SetEntityActive("chair_ghost", true);
		
		AddTimer("fallbook", 1.5f, "FallBook");
		return;
	}
	
	PlaySoundAtEntity("SoundPiano", "general_piano01.snt", "piano_1", 0.0f, false);
	//PlaySoundAtEntity("SoundWind", "general_wind_whirl.snt", "tome01_8", 0.0f, false);
	PlaySoundAtEntity("SoundWind", "03_wall_scratch.snt", "tome01_8", 0.5f, false);
	
	//SetLeverStuckState("piano_1", 0, false);
	//AddBodyImpulse("piano_1_BodyLid", 0,100, 0, "world");
		
	AddTimer("fallbook", 1.5f, "FallBook");
	
	AddTimer("fallbook1", 2.2f, "FallBook");
	
	AddTimer("fallbook2", 2.5f, "FallBook");
}
void CollideCloseLid(string &in asParent, string &in asChild, int alState)
{
	SetLeverStuckState("piano_1", 0, false);
	AddPropImpulse("piano_1", 0,0,10, "world");
	
	StopSound("SoundPiano", 1.0f);
	
	GiveSanityDamage(10, true);
	
	CreateParticleSystemAtEntity("PSdust", "ps_dust_piano.ps", "AreaPianoDust", false);
	
	AddTimer("liddust", 0.4f, "FallBook");
}

void FallBook(string &in asTimer)
{
	if(asTimer == "liddust"){
		PlaySoundAtEntity("LidClose", "level_wood_min_max01.snt", "piano_1", 0.0f, false);
		PlaySoundAtEntity("enemy", "enemy/grunt/amb_idle",  "AreaDustScrape_6", 0, false);
		return;
	}
	else if(asTimer == "fallbook1"){
		CreateParticleSystemAtEntity("PSdustbook", "ps_dust_impact.ps", "tome01_8", false);
		StartScreenShake(0.005f, 0.5f, 0.5f, 0.5f);
		return;
	}
	else if(asTimer == "fallbook2"){
		GiveSanityDamage(10, true);
		return;
	}	
	
	StopSound("SoundWind", 2);
	
	AddPropForce("tome01_8", 0, 300, -700, "world");
}
//END PIANO MUSIC//
///////////////////


///////////////////////////
//BEGIN SECRET SHELF DOOR//
void CollideSecretBook(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1) {
		SetLocalVarInt("Var"+asParent, 1);
		
		AddTimer(asParent, 20, "PushBackBook");
		
		SetPropObjectStuckState(asParent, 1);
		
		PlaySoundAtEntity("Sound"+asParent, "gameplay_tick", asParent, 0.0f, false);
		
		StartScreenShake(0.001f, 0.5f, 0.5f, 0.5f);
		
		PlayGuiSound("16_lever_stuck", 0.3f);
		
		/*DEBUG
		 */
		AddDebugMessage("Book in area: "+asParent, true);
	} else {
		SetLocalVarInt("Var"+asParent, 0);
		
		RemoveTimer(asParent);
		
		PlaySoundAtEntity("Sound2"+asParent, "lock_door", asParent, 1.5f, false);
		PlayGuiSound("16_lever_stuck", 0.2f);
		
		StopSound("Sound"+asParent, 1.0f);
		
		/*DEBUG
		 */
		AddDebugMessage("Book out of area: "+asParent, true);
	}
	
	/*All books are pulled before time is out and the secret room is revealed.
	 */
	if(GetLocalVarInt("VarSecretBook_1") == 1 && GetLocalVarInt("VarSecretBook_2") == 1 && GetLocalVarInt("VarSecretBook_3") == 1) {
		
		FadeLightTo("PointLight_30", 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 3.0f);
		
		SetMoveObjectState("shelf_secret_door_1", 1);
		
		SetPropObjectStuckState("SecretBook_*", -1);
		
		SetEntityInteractionDisabled("SecretBook_*", true);
		
		PlaySoundAtEntity("BooksDone", "lock_door", "Player", 0, false);
		
		CreateParticleSystemAtEntity("dust", "ps_dust_falling_door_quick", "AreaDoorParticle", false);
		
		for(int i=1;i<=3;i++){ RemoveTimer("SecretBook_"+i); StopSound("SoundSecretBook_"+i, 0.0f); }
		
		GiveSanityBoostSmall();
		
		/*DEBUG
		 */
		AddDebugMessage("All books in position, move shelf!", true);
	}

}
void PushBackBook(string &in asTimer)
{
	SetPropObjectStuckState(asTimer, -1);
	
	AddTimer("2"+asTimer, 0.25f, "PushBackBook02");
	
	/*DEBUG
	 */
	AddDebugMessage("Push back book: "+asTimer, true);
}
void PushBackBook02(string &in asTimer)
{
	if(asTimer == "2SecretBook_1") SetPropObjectStuckState("SecretBook_1", 0);
	else if(asTimer == "2SecretBook_2") SetPropObjectStuckState("SecretBook_2", 0);
	else SetPropObjectStuckState("SecretBook_3", 0);
}

void InteractMoveShelf(string &in asEntity)
{
	SetMessage("Ch01Level03", "MoveShelf", 0);
}

/*Find the key for the wine cellar
 */
void PickKey(string &in asEntity, string &in asType)
{	
	GiveSanityBoostSmall();
	
	SetGlobalVarString(asEntity, asEntity);
	
	AddEntityCollideCallback("Player", "AreaActivateLastPiano", "CollideLastPiano", true, 1);
}

void TimerEGrunt(string &in asTimer)
{
	int iMaxEventStep = 8;
	float fEventSpeed = 0.5f;
	string sEvent = asTimer;

	AddLocalVarInt(sEvent, 1);

	switch(GetLocalVarInt(sEvent)){
		case 1:
			SetPlayerMoveSpeedMul(0.8f);
			SetPlayerRunSpeedMul(0.8f);
			PlaySoundAtEntity("growl", "03_amb_idle", "AreaGrunt_1", 0.3f, false);
			fEventSpeed = 0.6f;
		break;
		case 2:
			SetPlayerMoveSpeedMul(0.6f);
			SetPlayerRunSpeedMul(0.6f);
			PlaySoundAtEntity("growl", "03_attack_claw", "AreaGrunt_1", 0.0f, false);
			fEventSpeed = 0.3f;
		break;
		case 3:
			SetPlayerMoveSpeedMul(0.4f);
			SetPlayerRunSpeedMul(0.4f);
			
			SetEntityActive("mansion_1", false);
			SetEntityActive("mansion_8", true);
			
			StartScreenShake(0.01f, 0.3f, 0.2f, 0.5f);
			
			PlaySoundAtEntity("hitdoor", "break_wood", "AreaGrunt_1", 0.0f, false);
			GiveSanityDamage(10.0f, true);
			
			CreateParticleSystemAtEntity("breakdoor", "ps_break_wood.ps", "mansion_8", false);
			
			FadeImageTrailTo(2.0f, 2.0f);
		break;
		case 4:
			PlayMusic("15_event_prisoner", false, 1.0f, 1.0f, 10, false);
			SetPlayerMoveSpeedMul(0.5f);
			SetPlayerRunSpeedMul(0.5f);
			PlayGuiSound("react_scare", 0.7f);
			fEventSpeed = 2.0f;
		break;
		case 5:
			StopMusic(4.0f, 10);
			SetPlayerMoveSpeedMul(0.7f);
			SetPlayerRunSpeedMul(0.7f);
			PlayGuiSound("react_breath", 0.8f);
			fEventSpeed = 2.0f;
		break;
		case 6:
			PlaySoundAtEntity("growl", "03_amb_idle", "AreaGrunt_2", 0.3f, false);
			SetPlayerMoveSpeedMul(0.8f);
			SetPlayerRunSpeedMul(0.8f);
			PlayGuiSound("react_breath", 0.6f);
			fEventSpeed = 2.0f;
		break;
		case 7:
			SetPlayerMoveSpeedMul(0.9f);
			SetPlayerRunSpeedMul(0.9f);
			PlayGuiSound("react_breath", 0.4f);
			fEventSpeed = 1.0f;
		break;
		case 8:
			SetPlayerMoveSpeedMul(1.0f);
			SetPlayerRunSpeedMul(1.0f);
			PlayGuiSound("react_breath", 0.2f);
			FadeImageTrailTo(0.0f, 2.0f);
		break;
	}

	if(GetLocalVarInt(sEvent) <= iMaxEventStep) AddTimer(sEvent, fEventSpeed, sEvent);
}
//END SECRET SHELF DOOR//
/////////////////////////


/////////////////////
//MISC MINOR EVENTS//
/*If player moves an urn from a table it will break and release a dust cloud
 */
void CollideJarLeaveArea(string &in asParent, string &in asChild, int alState)
{
	SetPropHealth(asParent, 0);
	
	PlaySoundAtEntity("ghost_released", "03_in_a_bottle", "Player", 0, false);
	
	GiveSanityDamage(10, true);
}

/*Play a last piano piece on the way out and activate a last cloud thing
 */
void CollideLastPiano(string &in asParent, string &in asChild, int alState)
{
	PlaySoundAtEntity("SoundPiano3", "general_piano03.snt", "piano_1", 0.0f, false);
	
	/*DEBUG
	 */
	AddDebugMessage("Play last piano", true);
}

/*Random ceiling particle and sound
 */
void TimerCrawl(string &in asTimer)
{
	int iCrawl = RandFloat(1, 8);	
	float fCrawl = RandFloat(0.5f,6.5f);
	
	CreateParticleSystemAtEntity("crawlPS"+iCrawl, "ps_dust_falling_small.ps", "AreaDustScrape_"+iCrawl, false);
	
	PlaySoundAtEntity("crawlSound"+iCrawl, "03_wall_scratch_single.snt", "AreaDustScrape_"+iCrawl, 1.0f, false);
	
	AddTimer("crawl", 3.5f+fCrawl, "TimerCrawl");
	
	/*DEBUG
	 */
	AddDebugMessage("Now crawling in: "+iCrawl+" Next crawl in: "+(5.5f+fCrawl), true);
}

/*Music when readin villlage note
 */
void PickVillageNote(string &in entity, string &in type)
{
	PlayMusic("03_paper_village.ogg", false, 0.7f, 0, 10, false);
}
/////////////////
/////////////////


//////////////////////////////////////
//START A GRUNT WALKING IN THE LEVEL//
/*A grunt is shown going into another room when coming into the room, two different places but only 1 will be used
 */
void CollideActivateLiveGrunt(string &in asParent, string &in asChild, int alState)
{
	if(asChild == "AreaActivateLiveGrunt_1"){ 
		SetEntityActive("servant_grunt_1", true);
		SetEntityActive("AreaActivateLiveGrunt_2", false);
	} else{
		SetEntityActive("servant_grunt_2", true);
		SetEntityActive("AreaActivateLiveGrunt_1", false);
	}
	
	SetPlayerRunSpeedMul(0.9f);
	SetPlayerMoveSpeedMul(0.9f);
	
	AddTimer("scare", 1.0f, "TimerGruntScare");
	AddTimer("breath", 3.0f, "TimerGruntScare");
}

/*Give sanity damage on grunt activation
 */
void TimerGruntScare(string &in asTimer)
{
	if(asTimer == "breath"){
		SetPlayerRunSpeedMul(1.0f);
		SetPlayerMoveSpeedMul(1.0f);
		return;
	}
	
	GiveSanityDamage(10.0f, true);
	PlayGuiSound("react_scare6", 0.7f);
	SetPlayerRunSpeedMul(0.8f);
	SetPlayerMoveSpeedMul(0.8f);
}

/*Remove the grunt as soon as it is in another room and out of sight
 */
void CollideDisableLiveGrunt(string &in asParent, string &in asChild, int alState)
{
	SetEntityActive(asParent, false);
}

/*If player goes to examine cavein from the other way around, a grunt appears behind him
 */
void CollideJumpGrunt(string &in asParent, string &in asChild, int alState)
{
	if(alState == 1) SetEntityActive("AreaLookGrunt", true);
	else SetEntityActive("AreaLookGrunt", false);
}

/*To make sure that grunt is only activated when looking away
 */
void LookAtGrunt(string &in asEntity, int alState)
{
	SetEntityActive("servant_grunt_3", true);
	AddTimer("scare", 0.5f, "TimerGruntScare");
}
//END A GRUNT WALKING IN THE LEVEL//
////////////////////////////////////


////////////////////
//START LEVER DOOR//
void LeverDoor(string &in asEntity, int alState)
{
	if(alState == 1)
	{
		SetMoveObjectState("safety_normal_vert_1", 1);
		PlaySoundAtEntity("", "unlock_door_snt", "safety_normal_vert_1", 0, false);
		//SetLeverStuckState(asEntity, alState, true);
	}
}

//END LEVER DOOR//
//////////////////



//-------------------------------------------------------

///////////////////////////////////////////////
// ARCHIVES CELLAR
///////////////////////////////////////////////

//-------------------------------------------------------



////////////////////////////
// Run first time starting map
void OnStart()
{
	SetMapDisplayNameEntry("LevelArchives");
	AddTimer("LanternQuest", 1, "TimerLanternQuest");
	
	//----COLLIDE CALLBACKS----//
	for(int i=1;i<=3;i++) AddEntityCollideCallback("SecretBook_"+i, "AreaSecretBook_"+i, "CollideSecretBook", false, 0);	//Pull books to reveal room
	AddEntityCollideCallback("Player", "AreaTriggerManyBook", "CollideBeginManyBook", true, 1);	//Makes the shelf bang and books fly
	AddEntityCollideCallback("Player", "AreaTriggerPiano", "CollideBeginPiano", true, 1);	//Some distant piano is playing and a book falls to the ground
	AddEntityCollideCallback("Player", "SlowArea_1", "CollideSlowArea", false, 0);	
	AddEntityCollideCallback("Player", "AreaSecondPiano", "CollideBeginPiano", true, 1);
	AddEntityCollideCallback("Player", "AreaClosePiano", "CollideCloseLid", true, 1);
	AddEntityCollideCallback("vase02_ghost_1", "AreaJar", "CollideJarLeaveArea", true, -1);
	AddEntityCollideCallback("Player", "AreaHalfToOrb", "CollideOrb", true, 1);
	AddEntityCollideCallback("Player", "AreaCloseToOrb", "CollideOrb", true, 1);
	AddEntityCollideCallback("chair_ghost", "mansionbase_secret_passage_1", "CollideHint", true, 1);			
	for(int i=1;i<=7;i++) AddEntityCollideCallback("rock_small_"+i, "mansionbase_secret_passage_1", "CollideHint", true, 1);
	for(int i=9;i<=12;i++) AddEntityCollideCallback("chair_nice01_"+i, "mansionbase_secret_passage_1", "CollideHint", true, 1);
	
	AddEntityCollideCallback("Player", "AreaTriggerDoor_1", "CollideOpeningDustDoor", true, 1);	//Door that swings open 1st corridor
	AddEntityCollideCallback("Player", "AreaBeginSwirl", "CollideBeginSwirl", true, 1);			//Swril and horror in room behind swing door
	AddEntityCollideCallback("Player", "AreaTriggerGhost", "CollideBeginGhost", true, 1);		//The steps and throwing book
	AddEntityCollideCallback("Player", "AreaTriggerTrail", "CollideCompleteTrail", true, 1);		//Complete the follow trail quest
	AddEntityCollideCallback("Player", "AreaTriggerLastWind", "CollideLastWind", true, 1);	//A last wind puff at end of hall
	AddEntityCollideCallback("Player", "AreaHintLean", "CollideHintLean", true, 1);	//Enable a hint to help finding the lever part
	AddEntityCollideCallback("Player", "AreaCollideTremble", "CollideTremble", true, 1);
	AddEntityCollideCallback("Player", "AreaCollideSeenDoor", "CollideAreaCollideSeenDoor", true, 1);
	
	AddEntityCollideCallback("Player", "AreaActivateLiveGrunt_1", "CollideActivateLiveGrunt", true, 1);
	AddEntityCollideCallback("Player", "AreaActivateLiveGrunt_2", "CollideActivateLiveGrunt", true, 1);
	
	AddEntityCollideCallback("servant_grunt_1", "AreaActivateLiveGrunt_3", "CollideDisableLiveGrunt", true, 1);
	AddEntityCollideCallback("servant_grunt_2", "AreaActivateLiveGrunt_3", "CollideDisableLiveGrunt", true, 1);
	
	AddEntityCollideCallback("Player", "AreaLookGrunt_1", "CollideJumpGrunt", false, 0);
	
	//----PLAYER INTERACTION----//
	SetEntityPlayerInteractCallback("PassageInteractArea", "PlayerInteractSecretPassage", false);
	
	//----PATROL FOR MONSTERS----//
	AddEnemyPatrolNode("servant_grunt_1", "PathNodeArea_5", 0.0f, "");
	AddEnemyPatrolNode("servant_grunt_2", "PathNodeArea_10", 0.0f, "");
	AddEnemyPatrolNode("servant_grunt_3", "PathNodeArea_14", 0.0f, "");
	
	
	//NOT IN USE 
	//for(int i=2;i<=5;i++)  AddEntityCollideCallback("Player", "AreaCloudActivate_"+i, "CollideCloudThing", true, 1);
	//----INTRO----//
	//CloudEffects("AreaCloudThing_1", true);
	
	SetEntityCallbackFunc("note_paper01_2", "PickVillageNote");
	
	//SetSkyBoxActive(true);
	//SetSkyBoxColor(0.25, 0.30, 0.35, 1);
	
	//----ENTITY INIT----//
	SetPropHealth("display_3", 0);
	CreateParticleSystemAtEntity("BeginWindPS", "ps_dust_push.ps", "AreaBeginWind", false);
	
	//----CONNECT CALLBACKS----//
	/*Secret hole in wall
	 */
	ConnectEntities("secret_painting",		//Name of connection
		"lever_small01", 	//Parent entity (Affects)
		"painting_large03_1",	//Child entity 	(Affected) 
		false,		//Invert the state sent
		1, 		//States used (0=both), checked before invertion.
		"");	//callback

	
	//----QUEST INIT----//
	SetNumberOfQuestsInMap(3);
	
	//----TIMER INIT----//
	AddTimer("crawl", 0.5f, "TimerCrawl");
	AddTimer("enemyS", 4.0f, "TimerIntroEnemy");
	
	//----VARIABLES----//
	SetLocalVarInt("VoiceResume", 0);
	SetGlobalVarInt("PlayerBeenInLevel03",1);
	
	//----DEBUG----//
	if(ScriptDebugOn())
	{
		GiveItemFromFile("lantern", "lantern.ent");
		for(int i=0;i<10;i++) GiveItemFromFile("tinderbox_"+i, "tinderbox.ent");
		
		//CollideCaveIn("", "", 1);	//to test cavein
		
		AddLocalVarInt("diary", 2);	//Activate flashback on first diary pickup
		//AddTimer("TimerFlashBack", 0.1f, "TimerFlashBack");	//To use when tetsing with start loction _Flash
		//SetPlayerLampOil(15);	//To test always give oil during flashback
	}
}

////////////////////////////
// Run when entering map
void OnEnter()
{	
	//----PRELOADING----//
	PreloadSound("scare_thump_flash"); PreloadSound("03_creak"); PreloadSound("03_rock_amb"); 
	PreloadSound("03_loop"); PreloadSound("03_orb_loop"); PreloadSound("03_orb_loop_loud"); PreloadSound("player_bodyfall"); 
	PreloadSound("react_breath_slow"); PreloadSound("03_pound"); PreloadSound("react_pant"); PreloadSound("player_climb"); 
	PreloadSound("03_drag_dirt"); PreloadSound("03_lift_rock"); PreloadSound("03_crew_talk"); PreloadSound("03_waking_up"); 
	PreloadSound("03_rock_move"); PreloadSound("react_sigh"); PreloadSound("scare_scratch"); PreloadSound("break_wood"); 
	PreloadSound("scare_thump_flash"); PreloadSound("general_piano02"); PreloadSound("general_wind_whirl"); 
    PreloadSound("scare_wall_scratch_single"); PreloadSound("general_piano01"); PreloadSound("gameplay_tick"); PreloadSound("lock_door"); 
	PreloadSound("03_cloud_swarm"); PreloadSound("03_in_a_bottle"); PreloadSound("general_piano03"); PreloadSound("general_blood_drop"); 
                                      
	PreloadParticleSystem("ps_break_wood"); PreloadParticleSystem("ps_dust_piano"); PreloadParticleSystem("ps_dust_impact");
	PreloadParticleSystem("ps_cloud_thing01"); PreloadParticleSystem("ps_blood_drop"); PreloadParticleSystem("ps_dust_falling_small");
	PreloadParticleSystem("ps_orb_on_player"); 
	
	PreloadSound("scare_wind_reverse"); PreloadSound("joint_door_move_special"); PreloadSound("scare_tingeling"); PreloadSound("01_tiny1"); 
	PreloadSound("react_breath"); PreloadSound("general_wind_whirl"); PreloadSound("react_scare"); PreloadSound("scare_slam_door"); 
	PreloadSound("01_tiny2"); PreloadSound("01_tiny3"); PreloadSound("scare_whine_loop"); PreloadSound("scare_tingeling_rev2"); 
	PreloadSound("01_tiny4"); PreloadSound("scare_thump_flash"); PreloadSound("00_loop"); PreloadSound("react_sigh"); 
	PreloadSound("00_faint"); PreloadSound("react_breath_no3d"); PreloadSound("scare_scratch"); PreloadSound("01_whirl"); 
	PreloadSound("scare_scratch_intense"); PreloadSound("scare_male_terrified"); PreloadSound("scare_wall_stomp"); PreloadSound("scare_ghost"); 
	PreloadSound("01_door"); PreloadSound("scare_wall_crawl_single"); PreloadSound("general_rock_rumble_no3d");

	PreloadParticleSystem("ps_dust_paper_blow"); PreloadParticleSystem("ps_dust_push"); PreloadParticleSystem("ps_dust_ghost");
	PreloadParticleSystem("ps_dust_whirl_large"); PreloadParticleSystem("ps_dust_impact_vert"); PreloadParticleSystem("ps_dust_impact");
	PreloadParticleSystem("ps_dust_falling_door");
	      
	     
	//----AUDIO----//
	PlayMusic("amb_darkness", true, 1, 0.1f, 0, true);
}

////////////////////////////
// Run when leaving map
void OnLeave()
{
}